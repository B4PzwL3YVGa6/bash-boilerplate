#!/usr/bin/env bash
#
#                                                 .___
#   ____  ____   _____   _____ _____    ____    __| _/______
# _/ ___\/  _ \ /     \ /     \\__  \  /    \  / __ |/  ___/
# \  \__(  <_> )  Y Y  \  Y Y  \/ __ \|   |  \/ /_/ |\___ \
#  \___  >____/|__|_|  /__|_|  (____  /___|  /\____ /____  >
#      \/            \/      \/     \/     \/      \/    \/
#
# A template for creating a bash program with commands.

###############################################################################
# Globals
###############################################################################

_VERSION="1.0.0-alpha"

###############################################################################
# Debug
###############################################################################

# _debug()
#
# Shortcut for testing against the existence of a $debug variable. Primarily
# intended to be used before a printf statement.
#
# Usage:
#   _debug && printf "Debug info"
_debug() { [[ -n "$debug" ]] && "$@"; }

###############################################################################
# Options
###############################################################################

# Get raw options for any commands that expect them.
raw_options=$*

# Initialize command options and arguments arrays.
#
# These contain any options and arguments that will be used by the commands.
# Commands handle their own argument and option checks using the created arrays.
command_options=()
command_arguments=()

while [ $# -gt 0 ]; do
  opt="$1"
  shift
  case "$opt" in
    -h|--help)
      cmd="help"
      ;;
    --version)
      cmd="version"
      ;;
    --debug)
      debug=1
      ;;
    -*|--*)
      command_options+=("$opt")
      ;;
    *)
      # The first non-option argument is assumed to be the command name.
      # All subsequent arguments are added to $command_arguments.
      if [[ -n $cmd ]]; then
        command_arguments+=("$opt")
      else
        cmd=$opt
      fi
      ;;
  esac
done

_debug printf "\$cmd: %s\n" "$cmd"
_debug printf "\$raw_options: %s\n" "$raw_options"
_debug printf "\$command_options: %s\n" "${command_options[*]}"
_debug printf "\$command_arguments: %s\n" "${command_arguments[*]}"

###############################################################################
# Environment
###############################################################################

# $_me
#
# Set to the program's basename.
_me=$(basename "$0")

_debug printf "\$_me: %s\n" "$_me"

###############################################################################
# Main
###############################################################################

# _main()
#
# Usage:
#   _main
#
# The primary function for starting the program.
#
# NOTE: must be called at end of program after all commands have been defined.
_main() {
  # If $cmd is blank, then set to help
  if [[ -z $cmd ]]; then
    cmd="help"
  fi

  # Get the list of defined commands.
  defined_commands=($(commands --raw))

  # Run the command and pass the command arguments.
  if ( _contains "$cmd" "${defined_commands[@]}" ); then
    $cmd "${command_arguments[@]}"
  else
    printf "Unknown command: %s\n" "$cmd"
    exit 1
  fi
}

###############################################################################
# Utility Functions
###############################################################################

# _function_exists()
#
# Takes a potential function name as an argument and returns whether a function
# exists with that name.
_function_exists() {
  [ "$(type -t "$1")" == 'function' ]
}

# _contains()
#
# Takes an item and a list and determines whether the list contains the item.
#
# Usage:
#   _contains "$item" "${list[@]}"
_contains() {
  local e
  for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
  return 1
}

###############################################################################
# desc
###############################################################################

# desc()
#
# Usage:
#   desc command "description"
#
# Create a description for a specified command name. The command description
# text can be passed as the second argument or as standard input.
#
# To make the description text available to other functions, desc() assigns the
# text to a variable with the format $_desc_function_name
desc() {
  [[ -z $1 ]] && printf "desc: No command name specified.\n" && exit 1
  if [[ -n $2 ]]; then
    read -d '' "_desc_$1" <<EOM
$2
EOM
  else
    read -d '' "_desc_$1"
  fi
}

# _print_desc()
#
# Usage:
#   _print_desc <command>
#
# Prints the description for a given command, provided the description has been
# set using the desc() function.
_print_desc() {
  var="_desc_$1"
  if [[ -n ${!var} ]]; then
    printf "%s\n" "${!var}"
  else
   printf "No additional information for \`%s\`\n" "$1"
  fi
}

###############################################################################
# Default Commands
###############################################################################

# Version #####################################################################

desc version <<EOM
Usage:
  $_me version
  $_me --version

Display the current program version.

To save you the trouble, the current version is $_VERSION
EOM
version() {
  printf "%s\n" "$_VERSION"
}

# Help ########################################################################

desc help <<EOM
Usage:
  $_me help [<command>]

Display help information for $_me or a specified command
EOM
help() {
  if [[ $# = 0 ]]; then
    cat <<EOM
                                                .___
  ____  ____   _____   _____ _____    ____    __| _/______
_/ ___\/  _ \ /     \ /     \\__  \  /    \  / __ |/  ___/
\  \__(  <_> )  Y Y  \  Y Y  \/ __ \|   |  \/ /_/ |\___ \\
 \___  >____/|__|_|  /__|_|  (____  /___|  /\____ /____  >
     \/            \/      \/     \/     \/      \/    \/

A template for creating a bash program with commands.

Version: $_VERSION

Usage:
  $_me command [<command-arguments>]

Help:
  $_me help [<command>]

$(commands)
EOM
  else
    _print_desc "$1"
  fi
}

# Command List ################################################################

desc commands <<EOM
Usage:
  $_me commands [--raw]

Display the list of available commands.
EOM
commands() {
  function_list=($(declare -F))
  command_list=()
  for c in "${function_list[@]}"
  do
    if ! ( [[ "$c" == "declare" ]] || \
           [[ "$c" == "-f" ]] || \
           [[ "$c" =~ ^_(.*) ]] || \
           [[ "$c" == "desc" ]]
    ); then
      command_list+=("$c")
    fi
  done
  if _contains "--raw" "${command_options[@]}"; then
    printf "%s " "${command_list[@]}"
  else
    printf "Available commands:\n"
    printf "  %s\n" "${command_list[@]}"
  fi
}

###############################################################################
# Commands
# ========.....................................................................
#
# Example command group structure:
#
# desc example ""   - Optional. A short description for the command.
# example() { : }   - The command called by the user.
#
#
# desc example <<EOM
#   Example help text. Options specified with http://docopt.org/
# EOM
# example() {
#   echo "Hello, World!"
# }
#
###############################################################################

# Example Section #############################################################

# --------------------------------------------------------------------- example

desc example <<EOM
Usage:
  $_me example [<name>] [--casual]

Print "Hello, World!"
EOM
example() {
  if ( _contains "--casual" "${command_options[@]}" ); then
    greeting="Hi"
  else
    greeting="Hello"
  fi
  name="${command_arguments[0]}"

  _debug printf "example() \$greeting: %s\n" "$greeting"
  _debug printf "example() \$name: %s\n" "$name"

  if [[ "$name" == "Bill" ]]; then
    printf "%s, William!\n" "$greeting"
  elif [[ -n "$name" ]]; then
    printf "%s, %s!\n" "$greeting" "$name"
  else
    printf "%s, World!\n" "$greeting"
  fi
}

###############################################################################
# Run Program
###############################################################################

# Calling the _main function after everything has been defined.
_main
