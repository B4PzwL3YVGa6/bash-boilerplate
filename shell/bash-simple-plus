#!/usr/bin/env bash
#       _                 _
#   ___(_)_ __ ___  _ __ | | ___   _
#  / __| | '_ ` _ \| '_ \| |/ _ \_| |_
#  \__ \ | | | | | | |_) | |  __/_   _|
#  |___/_|_| |_| |_| .__/|_|\___| |_|
#                  |_|
#
# Boilerplate for creating a simple bash script with some basic strictness
# checks, help features, easy debug printing.
#
# NOTE: extensive descriptions are included for easy reference.
#
# Usage:
#   bash-simple-plus argument
#
# Depends on:
#  list
#  of
#  programs
#  expected
#  in
#  environment
#
# Copyright (c) 2015 William Melody ‚Ä¢¬†hi@williammelody.com

###############################################################################
# Strict Mode
###############################################################################

# Treat unset variables and parameters other than the special parameters ‚Äò@‚Äô or
# ‚Äò*‚Äô as an error when performing parameter expansion. An error message will be
# written to the standard error, and a non-interactive shell will exit.
#
# This requires using parameter expansion to test for unset variables.
#
# http://www.gnu.org/software/bash/manual/bashref.html#Shell-Parameter-Expansion
#
# Examples
# ========
#
# Array:
#
#   ${some_array[@]:-}
#   ${some_array[*]:-}
#   ${some_array[0]:-}
#
# Postitional variables:
#
#   ${1:-alternative} # when a default value can be sepecified
#   ${2:-}            # when the desired alternative is a blank / null
#
# Short form: set -u
set -o nounset

# Exit immediately if a pipeline returns non-zero.
#
# NOTE: this has issues. When using read -rd '' with a heredoc, the exit
# status is non-zero, even though there isn't an error, and this setting
# then causes the script to exit. read -rd '' is synonymous to read -d $'\0',
# which means read until it finds a NUL byte, but it reaches the EOF (end of
# heredoc) without finding one and exits with a 1 status. Therefore, when
# reading from heredocs with set -e, there are three potential solutions:
#
# Solution 1. set +e / set -e again:
#
# set +e
# read -rd '' variable <<EOF
# EOF
# set -e
#
# Solution 2. <<EOF || true:
#
# read -rd '' variable <<EOF || true
# EOF
#
# Solution 3. Don't use set -e or set -o errexit at all.
#
# More information:
#
# https://www.mail-archive.com/bug-bash@gnu.org/msg12170.html
#
# Short form: set -e
set -o errexit

# Return value of a pipeline is the value of the last (rightmost) command to
# exit with a non-zero status, or zero if all commands in the pipeline exit
# successfully.
set -o pipefail

# Set IFS to just newline and tab at the start
#
# http://www.dwheeler.com/essays/filenames-in-shell.html
#
# $DEFAULT_IFS and $SAFER_IFS
#
# $DEFAULT_IFS contains the default $IFS value in case it's needed, such as
# when expanding an array and you want to separate elements by spaces.
# $SAFER_IFS contains the preferred settings for the program, and setting it
# separately makes it easier to switch between the two if needed.
#
# NOTE: also printing $DEFAULT_IFS to /dev/null to avoid shellcheck warnings
# about the variable being unused.
DEFAULT_IFS="$IFS"; printf "%s" "$DEFAULT_IFS" > /dev/null
SAFER_IFS="$(printf '\n\t')"
# Then set $IFS
IFS="$SAFER_IFS"

###############################################################################
# Environment
###############################################################################

# $_me
#
# Set to the program's basename.
_me=$(basename "$0")

###############################################################################
# Debug
###############################################################################

# _debug()
#
# Shortcut for testing against the existence of a $debug variable. Primarily
# intended to be used before a printf statement.
#
# Usage:
#   _debug printf "Debug info"
_debug() {
  if [[ "${_use_debug:-"0"}" -eq 1 ]]; then
    printf "üêõ  "
    "$@"
  fi
}

###############################################################################
# Help
###############################################################################

# Set $_program_help
#
# The `read` form of assignment is used for a balance of ease of
# implementation and simplicity. There is an alternative assignment form
# that could be used here:
#
# var="$(cat <<'EOM'
# some message
# EOM
# )
#
# However, this form appears to require trailing space after backslashes to
# preserve newlines, which is unexpected. Using `read` simply requires
# escaping backslashes, which is more common.
read -d '' "_program_help" <<EOM || true
      _                 _
  ___(_)_ __ ___  _ __ | | ___   _
 / __| | '_ \` _ \\\| '_ \\\\| |/ _ \\\\\_| |_
 \\\__ \\\ | | | | | | |_) | |  __/_   _|
 |___/_|_| |_| |_| .__/|_|\\\___| |_|
                 |_|

Boilerplate for creating a simple bash script with some basic strictness
checks and help features, and easy debug printing, and basic option handling.

Usage:
  $_me argument
EOM

# _print_help()
#
# Usage: _print_help
#
# Print the program help information.
_print_help() {
  printf "%s\n" "$_program_help"
}

###############################################################################
# Options
###############################################################################

# Steps:
#
# 1. set expected short options in `optstring` at beginning of the "Normalize
#    Options" section,
# 2. parse options in while loop in the "Parse Options" section.

# Normalize Options ###########################################################

# Source:
#   https://github.com/e36freak/templates/blob/master/options

# The first loop, even though it uses 'optstring', will NOT check if an
# option that takes a required argument has the argument provided. That must
# be done within the second loop and case statement, yourself. Its purpose
# is solely to determine that -oARG is split into -o ARG, and not -o -A -R -G.

# Set short options -----------------------------------------------------------

# option string, for short options.
#
# Very much like getopts, expected short options should be appended to the
# string here. Any option followed by a ':' takes a required argument.
#
# In this example, `-x` and `-h` are regular short options, while `o` is
# assumed to have an argument and will be split if joined with the string,
# meaning `-oARG` would be split to `-o ARG`.
optstring=xo:h

# Normalize -------------------------------------------------------------------

# iterate over options, breaking -ab into -a -b and --foo=bar into --foo bar
# also turns -- into --endopts to avoid issues with things like '-o-', the '-'
# should not indicate the end of options, but be an invalid option (or the
# argument to the option, such as wget -qO-)
unset options
# while the number of arguments is greater than 0
while (($#)); do
  case $1 in
    # if option is of type -ab
    -[!-]?*)
      # loop over each character starting with the second
      for ((i=1; i<${#1}; i++)); do
        # extract 1 character from position 'i'
        c=${1:i:1}
        # add current char to options
        options+=("-$c")

        # if option takes a required argument, and it's not the last char
        # make the rest of the string its argument
        if [[ $optstring = *"$c:"* && ${1:i+1} ]]; then
          options+=("${1:i+1}")
          break
        fi
      done
      ;;
    # if option is of type --foo=bar, split on first '='
    --?*=*) options+=("${1%%=*}" "${1#*=}");;
    # end of options, stop breaking them up
    --)
      options+=(--endopts)
      shift
      options+=("$@")
      break
      ;;
    # otherwise, nothing special
    *) options+=("$1");;
  esac

  shift
done
# set new positional parameters to altered options. Set default to blank.
set -- "${options[@]:-}"
unset options

# Parse Options ###############################################################

# Initialize program option variables.
_print_help=0
_use_debug=0

# Initialize additional expected option variables.
_option_x=0
_short_option_with_argument=""
_long_option_with_argument=""

# _require_argument()
#
# Usage:
#  _require_argument "$opt" "$_value_variable"
#
# Checks if an value has been set to the expected variable and, if not, prints
# and error message and exits with status 1.
_require_argument() {
  # Set local variables from arguments.
  #
  # NOTE: 'local' is a non-POSIX bash feature and keeps the variable local to
  # the block of code, as defined by curly braces. It's easiest to just think
  # of them as local to a function.
  local option="$1"
  local value="$2"

  if [[ -z "$value" ]]; then
    printf "Option requires an argument: %s\n" "$option"
    exit 1
  fi
}
# getopts and getopts have inconsistent behavior, so using a simple home-brewed
# while loop. This isn't perfectly compliant with POSIX, but it's close enough
# and this appears to be a widely used approach.
#
# More info:
#   http://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html
#   http://stackoverflow.com/a/14203146
#   http://stackoverflow.com/a/7948533
while [[ "${1:-}" = -?* ]]; do
  opt="$1"
  shift
  case "$opt" in
    -h|--help)
      _print_help=1
      ;;
    --debug)
      _use_debug=1
      ;;
    -x|--option-x)
      _option_x=1
      ;;
    -o)
      _short_option_with_argument="${1:-}"
      _require_argument "$opt" "$_short_option_with_argument"
       shift
      ;;
    --long-option-with-argument)
      _long_option_with_argument="${1:-}"
      _require_argument "$opt" "$_long_option_with_argument"
      shift
      ;;
    --endopts)
      # Terminate option parsing.
      break
      ;;
    *)
      printf "Unexpected option: %s\n" "$opt"
      exit 1
      ;;
  esac
done

###############################################################################
# Program Functions
###############################################################################

_simple() {
  _debug printf ">> Performing operation...\n"

  if [[ "$_option_x" == 1 ]]; then
    printf "Perform a simple operation with --option-x.\n"
  else
    printf "Perform a simple operation.\n"
  fi
  if [[ -n "$_short_option_with_argument" ]]; then
    printf "Short option value: %s\n" "$_short_option_with_argument"
  fi
  if [[ -n "$_long_option_with_argument" ]]; then
    printf "Long option value: %s\n" "$_long_option_with_argument"
  fi
}

###############################################################################
# Main
###############################################################################

_main() {
  if [[ "$_print_help" == 1 ]]; then
    _print_help
  else
    _simple "$@"
  fi
}

_main "$@"

